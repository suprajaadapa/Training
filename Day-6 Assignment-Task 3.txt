Task 8: Advanced Array Operations
a)  Implement a method SliceArray that takes an array, a starting index, and an end index, 
then returns a new array containing the elements from the start to the end index
sol:
package com.exceptions;
import java.util.Arrays;

public class SliceArray {

    public static int[] sliceArray(int[] arr, int start, int end) {
        if (start < 0 || end >= arr.length || start > end) {
            throw new IllegalArgumentException("Invalid start or end index");
        }
        int length = end - start + 1;
        int[] slicedArray = new int[length];
        for (int i = 0; i < length; i++) {
            slicedArray[i] = arr[start + i];
        }
        return slicedArray;
    }
    public static void main(String[] args) {
        int[] array = {12, 24, 36, 48, 60, 72, 84, 96, 108,120};
        int start = 3;
        int end = 6;

        int[] slicedArray = sliceArray(array, start, end);

        System.out.println("Original Array: " + Arrays.toString(array));
        System.out.println("Sliced Array from index " + start + " to " + end + ": " + Arrays.toString(slicedArray));
    }
}
=====================================================================================================
b) Create a recursive function to find the nth element of a Fibonacci sequence and 
store the first n elements in an array.
sol:
package com.exceptions;

import java.util.Arrays;

public class FibonacciSequence {
    public static void main(String[] args) {
        int n = 20; 
        int[] fibonacciArray = new int[n];
        
        for (int i = 0; i < n; i++) {
            fibonacciArray[i] = fibonacci(i);
        }
        
        System.out.println("Fibonacci sequence of first " + n + " elements:");
        System.out.println(Arrays.toString(fibonacciArray));
        
        int nthElement = fibonacci(n - 1); 
        System.out.println("The " + n + "th element of Fibonacci sequence is: " + nthElement);
    }
    
    public static int fibonacci(int n) {
        if (n <= 1) {
            return n;
        } else {
            return fibonacci(n - 1) + fibonacci(n - 2);
        }
    }
}
